#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    lua_package_path './lua/?.lua;;';

    init_worker_by_lua_block {
        local delay = 3  -- in seconds
        local new_timer = ngx.timer.at
        local log = ngx.log
        local ERR = ngx.ERR
        local check

        check = function(premature, count)
            if not premature then
                log(ERR, "timer count: ", count)
                -- do the health check or other routine work
                ngx.shared.log_dict:set(count, count)
                count = count + 1
                local ok, err = new_timer(delay, check, count)
                if not ok then
                    log(ERR, "failed to create timer: ", err)
                    return
                end
            end

            -- do something in timer
        end

        local hdl, err = new_timer(delay, check, 1)
        if not hdl then
            log(ERR, "failed to create timer: ", err)
            return
        end

        -- other job in init_worker_by_lua
    }


    server {
        listen       8081;
        location /stat {
            stat;
            root   html;
            index  index.html index.htm;
        }

        location = /ws {
            lua_socket_log_errors off;
            content_by_lua_block {
                local server = require "resty.websocket.server"
                local interp = require "interp"

                local wb, err = server:new{
                    timeout = 1000,  -- in milliseconds
                    max_payload_len = 65535,
                }
                if not wb then
                    ngx.log(ngx.ERR, "failed to new websocket: ", err)
                    return ngx.exit(444)
                end

                while true do
                    local data, typ, err = wb:recv_frame()

                    if not data then
                        if not string.find(err, "timeout", 1, true) then
                            ngx.log(ngx.ERR, "failed to receive a frame: ", err)
                            return ngx.exit(444)
                        end
                    end
                    
                    -- ngx.log(ngx.INFO, "received a frame of type ", typ, " and payload ", data)

                    if typ == "close" then
                        -- for typ "close", err contains the status code
                        local code = err
                    
                        -- send a close frame back:
                    
                        local bytes, err = wb:send_close(1000, "enough, enough!")
                        if not bytes then
                            ngx.log(ngx.ERR, "failed to send the close frame: ", err)
                            return
                        end
                        ngx.log(ngx.INFO, "closing with status code ", code, " and message ", data)
                        return
                    end
                    
                    if typ == "ping" then
                        -- send a pong frame back:
                    
                        local bytes, err = wb:send_pong(data)
                        if not bytes then
                            ngx.log(ngx.ERR, "failed to send frame: ", err)
                            return
                        end
                    elseif typ == "pong" then
                        -- just discard the incoming pong frame
                    elseif typ == "text" then
                        ngx.log(ngx.INFO, "received a frame of type ", typ, " and payload ", data)
                        local res = interp.handle_websocket_message(data)
                        if res then
                            ngx.log(ngx.INFO, "resp ", res)
                            local bytes, err
                            bytes, err = wb:send_text(res)
                            if not bytes then
                                ngx.log(ngx.ERR, "failed to send a text frame: ", err)
                                return ngx.exit(444)
                            end            
                        end
                    end
                end


                local bytes, err = wb:send_close(1000, "enough, enough!")
                if not bytes then
                    ngx.log(ngx.ERR, "failed to send the close frame: ", err)
                    return
                end
            }
        }
    }
}